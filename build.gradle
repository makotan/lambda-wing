// -*- coding: utf-8; mode: groovy -*-


buildscript {
    ext {
        springBootVersion = '[1.2.6.RELEASE,1.3.0.RELEASE)'
        awsSdkVersion = '[1.10.34,2.0.0)'
        apiGatewaySdkVersion = '[1.1.1,2.0.0)'
        awsLambdaSdkVersion = '[1.1.0,2.0.0)'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
//    apply plugin: 'spring-boot'

    //Encoding
    def defaultEncoding = 'UTF-8'
    [compileJava, compileTestJava]*.options*.encoding = defaultEncoding

    //Java Version
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    //プロジェクトのバージョン
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    //ソースディレクトリ設定
    sourceSets {
        generated {
            java {
                srcDirs = ['src/main/generated/']
            }
        }
        main {
            resources {
                srcDirs = ['src/main/resources']
            }
        }
    }

    //設定ファイルの切り替え(本番用・テストサーバ用)
    def environment = project.hasProperty('env') ? env : 'dev'

    if (environment.equals('prod'))
        sourceSets.main.resources.srcDirs 'src/main/resources/production'
    else
        sourceSets.main.resources.srcDirs 'src/main/resources/development'

    println "Target environment: $environment"


    configurations {
        provided
    }

    sourceSets {
        main.compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }

    idea {
        module {
            scopes.PROVIDED.plus += [configurations.provided]
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            //html.destination "${rootDir}/build/report/jacoco"
            xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport_${project.name}.xml"
        }
    }


    dependencies {

        compile(
                "com.amazonaws:aws-lambda-java-core:${awsLambdaSdkVersion}",
        )

        //Spring boot
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

    }

    //各種ディレクトリ生成
    task mkdirs << {
        ["src/main/generated", "src/main/java", "src/main/resources", "src/test/java", "src/test/resources"].each {
            def path = "${projectDir}/${it}"
            ant.mkdir(dir: path)
            ant.touch(file: "${path}/.gitkeep")
        }
    }

    jar {
        into('lib') {
            from configurations.compile
        }
    }

    javadoc {
        failOnError false
    }

}
group = "org..lambda_wing"

project(':sample/sample1') {
//    apply plugin: "base"
//    apply plugin: "jp.classmethod.aws.lambda"
/*
    lambda {
        region = "us-west-2"
    }
*/
    compileJava {
        options.compilerArgs << "-Xlint:deprecation"
    }

    task zip(type: Zip) {
        from "sample"
        destinationDir file("build")
    }
    dependencies {
        compile(
                project(':core'),
                project(':gw/core'),
        )
        testCompile(
                project(':test'),
        )
    }

}

project(':tool/shared') {

    dependencies {
        compile(
                project(':core'),
                project(':gw/core'),
        )
//        compile("org.springframework.boot:spring-boot-starter")
        testCompile(
                "org.springframework.boot:spring-boot-starter-test:${springBootVersion}",
                project(':sample/sample1'),
        )
        compile("org.springframework.boot:spring-boot-starter-logging:${springBootVersion}")

        // util
        compile('org.reflections:reflections:0.9.10')
        compile(
                'io.swagger:swagger-core:1.5.4',
                "com.amazonaws:aws-apigateway-sdk-java:${apiGatewaySdkVersion}",
                "com.amazonaws:aws-hal-client-java:[1.3.0,2.0.0)",
                "com.amazonaws:aws-lambda-java-core:${awsLambdaSdkVersion}",
                'com.fasterxml.jackson.core:jackson-databind:[2.6.3,2.7.0)',
                'com.fasterxml.jackson.module:jackson-module-jsonSchema:[2.6.3,2.7.0)',
                "com.amazonaws:aws-java-sdk:${awsSdkVersion}",
                "com.google.guava:guava:1.8.0",
        )

        compile 'com.goldmansachs:gs-collections-api:6.2.0'
        compile 'com.goldmansachs:gs-collections:6.2.0'
        testCompile 'com.goldmansachs:gs-collections-testutils:6.2.0'
        compile 'com.goldmansachs:gs-collections-forkjoin:6.2.0'
    }
}


project(':tool/cli') {
    apply plugin: 'application'

    mainClassName = 'org.lambda_wing.LambdaWingApp'

    startScripts {
        applicationName = 'bassar'
    }
    dependencies {
//        compile("org.springframework.boot:spring-boot-starter")
        compile('args4j:args4j:[2.32,3.0)')

        compile('org.reflections:reflections:0.9.10')
        compile(
                "com.amazonaws:aws-apigateway-sdk-java:${apiGatewaySdkVersion}",
                "com.amazonaws:aws-lambda-java-core:${awsLambdaSdkVersion}",
                "com.amazonaws:aws-java-sdk:${awsSdkVersion}",
        )
        compile(project(':tool/shared'))
        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-starter-logging:${springBootVersion}")

    }
    jar {
        manifest {
            attributes 'Main-Class' : 'org.lambda_wing.LambdaWingApp'
        }
        from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

project(':test') {
    dependencies {
        compile(
                project(':core'),
                project(':gw/core'),
        )

        compile('org.reflections:reflections:0.9.10')
        compile(
                "com.amazonaws:aws-java-sdk:${awsSdkVersion}",
                "com.amazonaws:aws-lambda-java-core:${awsLambdaSdkVersion}",
        )
        compile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
        compile("org.springframework.boot:spring-boot-starter-logging:${springBootVersion}")
    }
    
}

project(':libs/aws') {
    dependencies {
        compile(
                project(':core'),
                'javax.ws.rs:javax.ws.rs-api:2.0',
        )

        provided(
                "com.amazonaws:aws-java-sdk:${awsSdkVersion}",
        )
    }
    
}


project(':gw/core') {
    dependencies {
        compile(
                project(':core'),
                'io.swagger:swagger-annotations:1.5.4',
        )

        provided(
                "com.amazonaws:aws-java-sdk:${awsSdkVersion}",
        )
    }

}
